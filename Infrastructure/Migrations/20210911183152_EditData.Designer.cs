// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20210911183152_EditData")]
    partial class EditData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entites.Aboutus.Aboutus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Para1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Para2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QPParagraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisionMissionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aboutus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8e7d891-4976-485b-bbdc-36b7b15174b5"),
                            ImageURL = "about-01.jpg",
                            Para1 = "Edit ME!",
                            Para2 = "Edit ME!",
                            QPParagraph = "Edit ME!",
                            VisionMissionText = "Edit ME!"
                        });
                });

            modelBuilder.Entity("Core.Entites.Aboutus.Certification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("879ee92b-2b53-4c44-a5bd-aec982a1f2da"),
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 992, DateTimeKind.Local).AddTicks(5670),
                            CertificationName = "EditMe!",
                            CertificationURL = "certification-01.jpg"
                        },
                        new
                        {
                            Id = new Guid("a353890a-7bf5-4798-b011-760a56b775a6"),
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 992, DateTimeKind.Local).AddTicks(7692),
                            CertificationName = "EditMe!",
                            CertificationURL = "certification-01.jpg"
                        },
                        new
                        {
                            Id = new Guid("2f6b7595-fe04-4e58-88da-f6b44413f2a6"),
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 992, DateTimeKind.Local).AddTicks(7747),
                            CertificationName = "EditMe!",
                            CertificationURL = "certification-01.jpg"
                        });
                });

            modelBuilder.Entity("Core.Entites.Aboutus.QualityPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Point")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QualityPolicies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ddf3010-e72c-4d6d-a3b8-5e6ec35b6033"),
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 992, DateTimeKind.Local).AddTicks(8383),
                            Point = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("4222df5d-496b-44c0-a744-b18b95dd0d1b"),
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 992, DateTimeKind.Local).AddTicks(9756),
                            Point = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("dad99a33-17e0-4444-b4d7-ae0e0bb9c1ec"),
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 992, DateTimeKind.Local).AddTicks(9812),
                            Point = "EditMe!"
                        });
                });

            modelBuilder.Entity("Core.Entites.ApplicationUser.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Core.Entites.Contactus.Contactus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contactus");
                });

            modelBuilder.Entity("Core.Entites.Service.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("280cc275-4c1a-426e-aef7-58656e862a7b"),
                            ActionName = "Geotechnical",
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 993, DateTimeKind.Local).AddTicks(1512),
                            Content = "EditMe!",
                            ImageURL = "serv-01.jpg",
                            Title = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("7f2386eb-7c62-49a0-b983-4300ab3b3f00"),
                            ActionName = "Geotechnical",
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 993, DateTimeKind.Local).AddTicks(3543),
                            Content = "EditMe!",
                            ImageURL = "serv-01.jpg",
                            Title = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("4f587e13-50ab-4f16-98a4-94ee0c5612bb"),
                            ActionName = "Geotechnical",
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 993, DateTimeKind.Local).AddTicks(3607),
                            Content = "EditMe!",
                            ImageURL = "serv-01.jpg",
                            Title = "EditMe!"
                        });
                });

            modelBuilder.Entity("Core.Entites.Slide.Slide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlideURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3971364c-b414-45bc-a074-3cb5b68293ec"),
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 991, DateTimeKind.Local).AddTicks(9502),
                            SlideURL = "slide-01.jpg",
                            Text1 = "EditMe!",
                            Text2 = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("a7bc7a68-e012-4437-9c17-4caacb2bf1c6"),
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 992, DateTimeKind.Local).AddTicks(1003),
                            SlideURL = "slide-01.jpg",
                            Text1 = "EditMe!",
                            Text2 = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("0a67997f-b49f-4d4b-9e9d-5a1765765526"),
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 992, DateTimeKind.Local).AddTicks(1064),
                            SlideURL = "slide-01.jpg",
                            Text1 = "EditMe!",
                            Text2 = "EditMe!"
                        });
                });

            modelBuilder.Entity("Core.Entites.SpecialService.SpecialService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpecialServices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b63fa9de-51b6-4f3f-b4f4-662d8ad162b2"),
                            ActionName = "Robotic",
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 993, DateTimeKind.Local).AddTicks(5307),
                            Content = "EditMe!",
                            ImageURL = "sp-serv-01.jpg",
                            Title = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("de2a9fca-a4bf-42b5-b80d-fc1b6794230e"),
                            ActionName = "Robotic",
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 993, DateTimeKind.Local).AddTicks(7141),
                            Content = "EditMe!",
                            ImageURL = "sp-serv-01.jpg",
                            Title = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("76cf9ddb-377f-4494-9c96-f6a1b26ee1c2"),
                            ActionName = "Robotic",
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 993, DateTimeKind.Local).AddTicks(7200),
                            Content = "EditMe!",
                            ImageURL = "sp-serv-01.jpg",
                            Title = "EditMe!"
                        });
                });

            modelBuilder.Entity("Core.Entites.WebSettings.PdfFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PdfFiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8895f93-615c-4821-95f2-8bf6ed4da528"),
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 988, DateTimeKind.Local).AddTicks(3371),
                            FileName = "EditMe!",
                            FilePath = "https://drive.google.com/file/d/1FOmBQtqQNLNFv79jevVf9-ollzOcZLqQ/view"
                        },
                        new
                        {
                            Id = new Guid("0d10f146-0d83-4877-a6bc-0c42221b55ed"),
                            AddedDate = new DateTime(2021, 9, 11, 21, 31, 51, 991, DateTimeKind.Local).AddTicks(7409),
                            FileName = "EditMe!",
                            FilePath = "https://drive.google.com/file/d/1FOmBQtqQNLNFv79jevVf9-ollzOcZLqQ/view"
                        });
                });

            modelBuilder.Entity("Core.Entites.WebSettings.SocialMediaAddresses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("FbAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstaAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinAdress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SocialMediaAddresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aae3505d-1107-49a1-aec3-54db9f0268c3"),
                            FbAdress = "https://www.facebook.com/NewtestGeo",
                            InstaAdress = "https://www.facebook.com/NewtestGeo",
                            LinkedinAdress = "https://www.facebook.com/NewtestGeo"
                        });
                });

            modelBuilder.Entity("Core.Entites.WebSettings.WebSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FbAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotterLogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstaAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68b57642-34cd-4c7e-9379-2d34c56315a2"),
                            Adress = "EditMe!",
                            EmailAdress = "EditMe!",
                            FbAdress = "EditMe!",
                            FotterLogoURL = "fotter-logo.png",
                            FotterText = "EditME!",
                            InstaAdress = "EditMe!",
                            LinkedinAdress = "EditMe!",
                            LogoURL = "main-logo.png",
                            Phone = "EditMe!",
                            WhatsApp = "EditMe!"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Entites.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Entites.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entites.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Entites.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
