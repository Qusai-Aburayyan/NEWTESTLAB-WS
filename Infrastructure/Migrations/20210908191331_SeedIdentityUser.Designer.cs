// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20210908191331_SeedIdentityUser")]
    partial class SeedIdentityUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entites.Aboutus.Aboutus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Para1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Para2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QPParagraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisionMissionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aboutus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd5556e8-a375-4932-be6e-3357a94739e9"),
                            ImageURL = "about-01.jpg",
                            Para1 = "Edit ME!",
                            Para2 = "Edit ME!",
                            QPParagraph = "Edit ME!",
                            VisionMissionText = "Edit ME!"
                        });
                });

            modelBuilder.Entity("Core.Entites.Aboutus.Certification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a9f43bb-4710-49fd-8d5d-dec7bc6ac498"),
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 363, DateTimeKind.Local).AddTicks(4831),
                            CertificationName = "EditMe!",
                            CertificationURL = "certification-01.jpg"
                        },
                        new
                        {
                            Id = new Guid("e3b3741b-576e-4ebe-8e50-a6edeb481e2f"),
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 363, DateTimeKind.Local).AddTicks(7948),
                            CertificationName = "EditMe!",
                            CertificationURL = "certification-01.jpg"
                        },
                        new
                        {
                            Id = new Guid("d38b2d32-39bb-4e2b-b3c3-77900dafb318"),
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 363, DateTimeKind.Local).AddTicks(8042),
                            CertificationName = "EditMe!",
                            CertificationURL = "certification-01.jpg"
                        });
                });

            modelBuilder.Entity("Core.Entites.Aboutus.QualityPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Point")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QualityPolicies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a33e3ea6-a0a9-41a7-8789-342ea4c3287b"),
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 363, DateTimeKind.Local).AddTicks(9045),
                            Point = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("f11286c2-d181-4dec-80f1-4897129b9185"),
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 364, DateTimeKind.Local).AddTicks(1332),
                            Point = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("13e72533-71d4-4e07-9e6c-af48bb882930"),
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 364, DateTimeKind.Local).AddTicks(1431),
                            Point = "EditMe!"
                        });
                });

            modelBuilder.Entity("Core.Entites.ApplicationUser.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRole")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a565eae5-57fe-48a4-9918-706b5d81159c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7462a992-572d-4133-a70d-7c634c945a2f",
                            Email = "info@newtestlab.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "H4ZX7SHJ@Qu",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "722ac13b-97bf-427b-bbf3-21a76ff450b4",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Core.Entites.Contactus.Contactus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contactus");
                });

            modelBuilder.Entity("Core.Entites.Service.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6712fab-6fe1-4cd9-9504-141c80710eb8"),
                            ActionName = "Geotechnical",
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 364, DateTimeKind.Local).AddTicks(4406),
                            Content = "EditMe!",
                            ImageURL = "serv-01.jpg",
                            Title = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("f6bc7e31-bda7-40d3-b731-86fb52b7c725"),
                            ActionName = "Geotechnical",
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 364, DateTimeKind.Local).AddTicks(8108),
                            Content = "EditMe!",
                            ImageURL = "serv-01.jpg",
                            Title = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("90c887b9-ffe0-4ce9-8363-1416e54f53c5"),
                            ActionName = "Geotechnical",
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 364, DateTimeKind.Local).AddTicks(8207),
                            Content = "EditMe!",
                            ImageURL = "serv-01.jpg",
                            Title = "EditMe!"
                        });
                });

            modelBuilder.Entity("Core.Entites.Slide.Slide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlideURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0633f67-1d90-490e-8ca9-b07c95d63204"),
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 362, DateTimeKind.Local).AddTicks(5312),
                            SlideURL = "slide-01.jpg",
                            Text1 = "EditMe!",
                            Text2 = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("082abd63-5527-477f-88a7-29b7aa653374"),
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 362, DateTimeKind.Local).AddTicks(7652),
                            SlideURL = "slide-01.jpg",
                            Text1 = "EditMe!",
                            Text2 = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("65f504c7-541a-4b2a-abd2-dc5f9e3e7e24"),
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 362, DateTimeKind.Local).AddTicks(7744),
                            SlideURL = "slide-01.jpg",
                            Text1 = "EditMe!",
                            Text2 = "EditMe!"
                        });
                });

            modelBuilder.Entity("Core.Entites.SpecialService.SpecialService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpecialServices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ebbd4123-6256-42a9-832a-d62decc5595e"),
                            ActionName = "Robotic",
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 365, DateTimeKind.Local).AddTicks(1283),
                            Content = "EditMe!",
                            ImageURL = "sp-serv-01.jpg",
                            Title = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("431a7eae-ce0f-4f5e-9089-c020dba81d61"),
                            ActionName = "Robotic",
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 365, DateTimeKind.Local).AddTicks(4856),
                            Content = "EditMe!",
                            ImageURL = "sp-serv-01.jpg",
                            Title = "EditMe!"
                        },
                        new
                        {
                            Id = new Guid("a29f5637-8511-41f7-83e2-9be1e877023d"),
                            ActionName = "Robotic",
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 365, DateTimeKind.Local).AddTicks(5201),
                            Content = "EditMe!",
                            ImageURL = "sp-serv-01.jpg",
                            Title = "EditMe!"
                        });
                });

            modelBuilder.Entity("Core.Entites.WebSettings.PdfFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PdfFiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c4b5ea3-1582-4630-ac0b-360a73e05f9e"),
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 357, DateTimeKind.Local).AddTicks(1139),
                            FileName = "EditMe!",
                            FilePath = "https://drive.google.com/file/d/1FOmBQtqQNLNFv79jevVf9-ollzOcZLqQ/view"
                        },
                        new
                        {
                            Id = new Guid("0cca69ec-f4f4-4740-9d8c-9579078a7846"),
                            AddedDate = new DateTime(2021, 9, 8, 22, 13, 30, 362, DateTimeKind.Local).AddTicks(2284),
                            FileName = "EditMe!",
                            FilePath = "https://drive.google.com/file/d/1FOmBQtqQNLNFv79jevVf9-ollzOcZLqQ/view"
                        });
                });

            modelBuilder.Entity("Core.Entites.WebSettings.SocialMediaAddresses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("FbAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstaAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinAdress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SocialMediaAddresses");
                });

            modelBuilder.Entity("Core.Entites.WebSettings.WebSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FbAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotterLogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstaAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedinAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d66b1b8-3a3c-494f-9923-1c095b91bb8e"),
                            Adress = "EditMe!",
                            EmailAdress = "EditMe!",
                            FbAdress = "EditMe!",
                            FotterLogoURL = "fotter-logo.png",
                            FotterText = "EditME!",
                            InstaAdress = "EditMe!",
                            LinkedinAdress = "EditMe!",
                            LogoURL = "main-logo.png",
                            Phone = "EditMe!",
                            WhatsApp = "EditMe!"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Entites.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Entites.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entites.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Entites.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
